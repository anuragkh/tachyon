/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package succinct.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MasterService {

  public interface Iface {

    public String createSuccinctFile(String filePath, int partScheme, byte delim1, byte delim2) throws org.apache.thrift.TException;

    public String openSuccinctFile() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createSuccinctFile(String filePath, int partScheme, byte delim1, byte delim2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createSuccinctFile_call> resultHandler) throws org.apache.thrift.TException;

    public void openSuccinctFile(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.openSuccinctFile_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createSuccinctFile(String filePath, int partScheme, byte delim1, byte delim2) throws org.apache.thrift.TException
    {
      send_createSuccinctFile(filePath, partScheme, delim1, delim2);
      return recv_createSuccinctFile();
    }

    public void send_createSuccinctFile(String filePath, int partScheme, byte delim1, byte delim2) throws org.apache.thrift.TException
    {
      createSuccinctFile_args args = new createSuccinctFile_args();
      args.setFilePath(filePath);
      args.setPartScheme(partScheme);
      args.setDelim1(delim1);
      args.setDelim2(delim2);
      sendBase("createSuccinctFile", args);
    }

    public String recv_createSuccinctFile() throws org.apache.thrift.TException
    {
      createSuccinctFile_result result = new createSuccinctFile_result();
      receiveBase(result, "createSuccinctFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createSuccinctFile failed: unknown result");
    }

    public String openSuccinctFile() throws org.apache.thrift.TException
    {
      send_openSuccinctFile();
      return recv_openSuccinctFile();
    }

    public void send_openSuccinctFile() throws org.apache.thrift.TException
    {
      openSuccinctFile_args args = new openSuccinctFile_args();
      sendBase("openSuccinctFile", args);
    }

    public String recv_openSuccinctFile() throws org.apache.thrift.TException
    {
      openSuccinctFile_result result = new openSuccinctFile_result();
      receiveBase(result, "openSuccinctFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openSuccinctFile failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createSuccinctFile(String filePath, int partScheme, byte delim1, byte delim2, org.apache.thrift.async.AsyncMethodCallback<createSuccinctFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createSuccinctFile_call method_call = new createSuccinctFile_call(filePath, partScheme, delim1, delim2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSuccinctFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filePath;
      private int partScheme;
      private byte delim1;
      private byte delim2;
      public createSuccinctFile_call(String filePath, int partScheme, byte delim1, byte delim2, org.apache.thrift.async.AsyncMethodCallback<createSuccinctFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
        this.partScheme = partScheme;
        this.delim1 = delim1;
        this.delim2 = delim2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createSuccinctFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createSuccinctFile_args args = new createSuccinctFile_args();
        args.setFilePath(filePath);
        args.setPartScheme(partScheme);
        args.setDelim1(delim1);
        args.setDelim2(delim2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createSuccinctFile();
      }
    }

    public void openSuccinctFile(org.apache.thrift.async.AsyncMethodCallback<openSuccinctFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openSuccinctFile_call method_call = new openSuccinctFile_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openSuccinctFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      public openSuccinctFile_call(org.apache.thrift.async.AsyncMethodCallback<openSuccinctFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openSuccinctFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openSuccinctFile_args args = new openSuccinctFile_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openSuccinctFile();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createSuccinctFile", new createSuccinctFile());
      processMap.put("openSuccinctFile", new openSuccinctFile());
      return processMap;
    }

    public static class createSuccinctFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createSuccinctFile_args> {
      public createSuccinctFile() {
        super("createSuccinctFile");
      }

      public createSuccinctFile_args getEmptyArgsInstance() {
        return new createSuccinctFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createSuccinctFile_result getResult(I iface, createSuccinctFile_args args) throws org.apache.thrift.TException {
        createSuccinctFile_result result = new createSuccinctFile_result();
        result.success = iface.createSuccinctFile(args.filePath, args.partScheme, args.delim1, args.delim2);
        return result;
      }
    }

    public static class openSuccinctFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openSuccinctFile_args> {
      public openSuccinctFile() {
        super("openSuccinctFile");
      }

      public openSuccinctFile_args getEmptyArgsInstance() {
        return new openSuccinctFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openSuccinctFile_result getResult(I iface, openSuccinctFile_args args) throws org.apache.thrift.TException {
        openSuccinctFile_result result = new openSuccinctFile_result();
        result.success = iface.openSuccinctFile();
        return result;
      }
    }

  }

  public static class createSuccinctFile_args implements org.apache.thrift.TBase<createSuccinctFile_args, createSuccinctFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSuccinctFile_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PART_SCHEME_FIELD_DESC = new org.apache.thrift.protocol.TField("partScheme", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DELIM1_FIELD_DESC = new org.apache.thrift.protocol.TField("delim1", org.apache.thrift.protocol.TType.BYTE, (short)3);
    private static final org.apache.thrift.protocol.TField DELIM2_FIELD_DESC = new org.apache.thrift.protocol.TField("delim2", org.apache.thrift.protocol.TType.BYTE, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSuccinctFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSuccinctFile_argsTupleSchemeFactory());
    }

    public String filePath; // required
    public int partScheme; // required
    public byte delim1; // required
    public byte delim2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath"),
      PART_SCHEME((short)2, "partScheme"),
      DELIM1((short)3, "delim1"),
      DELIM2((short)4, "delim2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          case 2: // PART_SCHEME
            return PART_SCHEME;
          case 3: // DELIM1
            return DELIM1;
          case 4: // DELIM2
            return DELIM2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARTSCHEME_ISSET_ID = 0;
    private static final int __DELIM1_ISSET_ID = 1;
    private static final int __DELIM2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PART_SCHEME, new org.apache.thrift.meta_data.FieldMetaData("partScheme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DELIM1, new org.apache.thrift.meta_data.FieldMetaData("delim1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      tmpMap.put(_Fields.DELIM2, new org.apache.thrift.meta_data.FieldMetaData("delim2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSuccinctFile_args.class, metaDataMap);
    }

    public createSuccinctFile_args() {
    }

    public createSuccinctFile_args(
      String filePath,
      int partScheme,
      byte delim1,
      byte delim2)
    {
      this();
      this.filePath = filePath;
      this.partScheme = partScheme;
      setPartSchemeIsSet(true);
      this.delim1 = delim1;
      setDelim1IsSet(true);
      this.delim2 = delim2;
      setDelim2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSuccinctFile_args(createSuccinctFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
      this.partScheme = other.partScheme;
      this.delim1 = other.delim1;
      this.delim2 = other.delim2;
    }

    public createSuccinctFile_args deepCopy() {
      return new createSuccinctFile_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
      setPartSchemeIsSet(false);
      this.partScheme = 0;
      setDelim1IsSet(false);
      this.delim1 = 0;
      setDelim2IsSet(false);
      this.delim2 = 0;
    }

    public String getFilePath() {
      return this.filePath;
    }

    public createSuccinctFile_args setFilePath(String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public int getPartScheme() {
      return this.partScheme;
    }

    public createSuccinctFile_args setPartScheme(int partScheme) {
      this.partScheme = partScheme;
      setPartSchemeIsSet(true);
      return this;
    }

    public void unsetPartScheme() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTSCHEME_ISSET_ID);
    }

    /** Returns true if field partScheme is set (has been assigned a value) and false otherwise */
    public boolean isSetPartScheme() {
      return EncodingUtils.testBit(__isset_bitfield, __PARTSCHEME_ISSET_ID);
    }

    public void setPartSchemeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTSCHEME_ISSET_ID, value);
    }

    public byte getDelim1() {
      return this.delim1;
    }

    public createSuccinctFile_args setDelim1(byte delim1) {
      this.delim1 = delim1;
      setDelim1IsSet(true);
      return this;
    }

    public void unsetDelim1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIM1_ISSET_ID);
    }

    /** Returns true if field delim1 is set (has been assigned a value) and false otherwise */
    public boolean isSetDelim1() {
      return EncodingUtils.testBit(__isset_bitfield, __DELIM1_ISSET_ID);
    }

    public void setDelim1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIM1_ISSET_ID, value);
    }

    public byte getDelim2() {
      return this.delim2;
    }

    public createSuccinctFile_args setDelim2(byte delim2) {
      this.delim2 = delim2;
      setDelim2IsSet(true);
      return this;
    }

    public void unsetDelim2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIM2_ISSET_ID);
    }

    /** Returns true if field delim2 is set (has been assigned a value) and false otherwise */
    public boolean isSetDelim2() {
      return EncodingUtils.testBit(__isset_bitfield, __DELIM2_ISSET_ID);
    }

    public void setDelim2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIM2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((String)value);
        }
        break;

      case PART_SCHEME:
        if (value == null) {
          unsetPartScheme();
        } else {
          setPartScheme((Integer)value);
        }
        break;

      case DELIM1:
        if (value == null) {
          unsetDelim1();
        } else {
          setDelim1((Byte)value);
        }
        break;

      case DELIM2:
        if (value == null) {
          unsetDelim2();
        } else {
          setDelim2((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      case PART_SCHEME:
        return Integer.valueOf(getPartScheme());

      case DELIM1:
        return Byte.valueOf(getDelim1());

      case DELIM2:
        return Byte.valueOf(getDelim2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case PART_SCHEME:
        return isSetPartScheme();
      case DELIM1:
        return isSetDelim1();
      case DELIM2:
        return isSetDelim2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSuccinctFile_args)
        return this.equals((createSuccinctFile_args)that);
      return false;
    }

    public boolean equals(createSuccinctFile_args that) {
      if (that == null)
        return false;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_partScheme = true;
      boolean that_present_partScheme = true;
      if (this_present_partScheme || that_present_partScheme) {
        if (!(this_present_partScheme && that_present_partScheme))
          return false;
        if (this.partScheme != that.partScheme)
          return false;
      }

      boolean this_present_delim1 = true;
      boolean that_present_delim1 = true;
      if (this_present_delim1 || that_present_delim1) {
        if (!(this_present_delim1 && that_present_delim1))
          return false;
        if (this.delim1 != that.delim1)
          return false;
      }

      boolean this_present_delim2 = true;
      boolean that_present_delim2 = true;
      if (this_present_delim2 || that_present_delim2) {
        if (!(this_present_delim2 && that_present_delim2))
          return false;
        if (this.delim2 != that.delim2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createSuccinctFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSuccinctFile_args typedOther = (createSuccinctFile_args)other;

      lastComparison = Boolean.valueOf(isSetFilePath()).compareTo(typedOther.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, typedOther.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPartScheme()).compareTo(typedOther.isSetPartScheme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartScheme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partScheme, typedOther.partScheme);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelim1()).compareTo(typedOther.isSetDelim1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelim1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delim1, typedOther.delim1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDelim2()).compareTo(typedOther.isSetDelim2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelim2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delim2, typedOther.delim2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSuccinctFile_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partScheme:");
      sb.append(this.partScheme);
      first = false;
      if (!first) sb.append(", ");
      sb.append("delim1:");
      sb.append(this.delim1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("delim2:");
      sb.append(this.delim2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSuccinctFile_argsStandardSchemeFactory implements SchemeFactory {
      public createSuccinctFile_argsStandardScheme getScheme() {
        return new createSuccinctFile_argsStandardScheme();
      }
    }

    private static class createSuccinctFile_argsStandardScheme extends StandardScheme<createSuccinctFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSuccinctFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PART_SCHEME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partScheme = iprot.readI32();
                struct.setPartSchemeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DELIM1
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.delim1 = iprot.readByte();
                struct.setDelim1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DELIM2
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.delim2 = iprot.readByte();
                struct.setDelim2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSuccinctFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PART_SCHEME_FIELD_DESC);
        oprot.writeI32(struct.partScheme);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DELIM1_FIELD_DESC);
        oprot.writeByte(struct.delim1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DELIM2_FIELD_DESC);
        oprot.writeByte(struct.delim2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSuccinctFile_argsTupleSchemeFactory implements SchemeFactory {
      public createSuccinctFile_argsTupleScheme getScheme() {
        return new createSuccinctFile_argsTupleScheme();
      }
    }

    private static class createSuccinctFile_argsTupleScheme extends TupleScheme<createSuccinctFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSuccinctFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilePath()) {
          optionals.set(0);
        }
        if (struct.isSetPartScheme()) {
          optionals.set(1);
        }
        if (struct.isSetDelim1()) {
          optionals.set(2);
        }
        if (struct.isSetDelim2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
        if (struct.isSetPartScheme()) {
          oprot.writeI32(struct.partScheme);
        }
        if (struct.isSetDelim1()) {
          oprot.writeByte(struct.delim1);
        }
        if (struct.isSetDelim2()) {
          oprot.writeByte(struct.delim2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSuccinctFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partScheme = iprot.readI32();
          struct.setPartSchemeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.delim1 = iprot.readByte();
          struct.setDelim1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.delim2 = iprot.readByte();
          struct.setDelim2IsSet(true);
        }
      }
    }

  }

  public static class createSuccinctFile_result implements org.apache.thrift.TBase<createSuccinctFile_result, createSuccinctFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSuccinctFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createSuccinctFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createSuccinctFile_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSuccinctFile_result.class, metaDataMap);
    }

    public createSuccinctFile_result() {
    }

    public createSuccinctFile_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSuccinctFile_result(createSuccinctFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createSuccinctFile_result deepCopy() {
      return new createSuccinctFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createSuccinctFile_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSuccinctFile_result)
        return this.equals((createSuccinctFile_result)that);
      return false;
    }

    public boolean equals(createSuccinctFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createSuccinctFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createSuccinctFile_result typedOther = (createSuccinctFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createSuccinctFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSuccinctFile_resultStandardSchemeFactory implements SchemeFactory {
      public createSuccinctFile_resultStandardScheme getScheme() {
        return new createSuccinctFile_resultStandardScheme();
      }
    }

    private static class createSuccinctFile_resultStandardScheme extends StandardScheme<createSuccinctFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSuccinctFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSuccinctFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSuccinctFile_resultTupleSchemeFactory implements SchemeFactory {
      public createSuccinctFile_resultTupleScheme getScheme() {
        return new createSuccinctFile_resultTupleScheme();
      }
    }

    private static class createSuccinctFile_resultTupleScheme extends TupleScheme<createSuccinctFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSuccinctFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSuccinctFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class openSuccinctFile_args implements org.apache.thrift.TBase<openSuccinctFile_args, openSuccinctFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSuccinctFile_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSuccinctFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSuccinctFile_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSuccinctFile_args.class, metaDataMap);
    }

    public openSuccinctFile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSuccinctFile_args(openSuccinctFile_args other) {
    }

    public openSuccinctFile_args deepCopy() {
      return new openSuccinctFile_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSuccinctFile_args)
        return this.equals((openSuccinctFile_args)that);
      return false;
    }

    public boolean equals(openSuccinctFile_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openSuccinctFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openSuccinctFile_args typedOther = (openSuccinctFile_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSuccinctFile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSuccinctFile_argsStandardSchemeFactory implements SchemeFactory {
      public openSuccinctFile_argsStandardScheme getScheme() {
        return new openSuccinctFile_argsStandardScheme();
      }
    }

    private static class openSuccinctFile_argsStandardScheme extends StandardScheme<openSuccinctFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSuccinctFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSuccinctFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSuccinctFile_argsTupleSchemeFactory implements SchemeFactory {
      public openSuccinctFile_argsTupleScheme getScheme() {
        return new openSuccinctFile_argsTupleScheme();
      }
    }

    private static class openSuccinctFile_argsTupleScheme extends TupleScheme<openSuccinctFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSuccinctFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSuccinctFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class openSuccinctFile_result implements org.apache.thrift.TBase<openSuccinctFile_result, openSuccinctFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openSuccinctFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openSuccinctFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openSuccinctFile_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openSuccinctFile_result.class, metaDataMap);
    }

    public openSuccinctFile_result() {
    }

    public openSuccinctFile_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openSuccinctFile_result(openSuccinctFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public openSuccinctFile_result deepCopy() {
      return new openSuccinctFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public openSuccinctFile_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openSuccinctFile_result)
        return this.equals((openSuccinctFile_result)that);
      return false;
    }

    public boolean equals(openSuccinctFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openSuccinctFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openSuccinctFile_result typedOther = (openSuccinctFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openSuccinctFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openSuccinctFile_resultStandardSchemeFactory implements SchemeFactory {
      public openSuccinctFile_resultStandardScheme getScheme() {
        return new openSuccinctFile_resultStandardScheme();
      }
    }

    private static class openSuccinctFile_resultStandardScheme extends StandardScheme<openSuccinctFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openSuccinctFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openSuccinctFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openSuccinctFile_resultTupleSchemeFactory implements SchemeFactory {
      public openSuccinctFile_resultTupleScheme getScheme() {
        return new openSuccinctFile_resultTupleScheme();
      }
    }

    private static class openSuccinctFile_resultTupleScheme extends TupleScheme<openSuccinctFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openSuccinctFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openSuccinctFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
